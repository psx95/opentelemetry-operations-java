/*
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
	id 'java'
	id 'java-library'
	id 'com.github.johnrengelman.shadow'
	id 'org.springframework.boot' version '2.7.18'
}

description = 'OpenTelemetry Java Agent Extension that enables authentication support for OTLP exporters'

tasks {
	assemble.dependsOn(shadowJar)
}

shadowJar {
	archiveFileName.set("gcp-auth-extension.jar")
}

jar {
	// Disable standard jar
	enabled = false
}

// Custom configurations used to facilitate running the integration test
configurations {
	agent
}

dependencies {
	annotationProcessor(libraries.auto_service)
	// We use `compileOnly` dependency because during runtime all necessary classes are provided by javaagent itself.
	compileOnly(libraries.auto_service_annotations)
	compileOnly(libraries.opentelemetry_api)
	compileOnly(libraries.opentelemetry_otlp_exporter)
	compileOnly(libraries.opentelemetry_sdk_autoconf)
	compileOnly(libraries.opentelemetry_autoconfigure_spi)

	//  Only dependencies added to `implementation` configuration will be picked up by Shadow plugin
	//  and added to the resulting jar for our extension's distribution.
	implementation(libraries.google_auth)

	// test dependencies
	testRuntimeOnly(testLibraries.junit5_runtime)
	testImplementation(testLibraries.junit5)
	testImplementation(libraries.opentelemetry_api)
	testImplementation(libraries.opentelemetry_otlp_exporter)
	testImplementation(testLibraries.opentelemetry_sdk_testing)
	testImplementation(testLibraries.mockito)
	testImplementation(testLibraries.mockito_jupiter)
	testImplementation(libraries.opentelemetry_sdk_autoconf)
	// for implementing smoke test application
	testImplementation(libraries.spring_boot_starter_web)
	testImplementation(testLibraries.spring_boot_starter_test)
	testImplementation("org.mock-server:mockserver-netty:5.15.0")
	testImplementation("org.awaitility:awaitility:4.2.2")
	testImplementation("io.opentelemetry.proto:opentelemetry-proto:1.4.0-alpha")
	testImplementation("io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations:2.8.0")
	// OTel instrumentation used in the sample app to facilitate integration testing
	agent agentLibraries.agent
}

// task to copy and rename the Java Auto-Instrumentation Agent into 'libs' folder
tasks.register('copyAgent', Copy) {
	into layout.buildDirectory.dir("libs")
	from configurations.agent {
		rename "opentelemetry-javaagent(.*).jar", "otel-agent.jar"
	}
}

def builtLibsDir = layout.buildDirectory.dir("libs").get().toString()
def javaAgentJarPath = builtLibsDir + "/otel-agent.jar"
def authExtensionJarPath = builtLibsDir + "/gcp-auth-extension.jar"

// this task is run as part of the integration test so it is necessary to
// configure this
tasks.named('bootJar').configure {
	dependsOn('copyAgent')
}

build {
	// disable bootJar in build since it only runs as part of test
	tasks.named('bootJar').configure {
		enabled = false
	}
}

test {
	dependsOn 'shadowJar'
	dependsOn 'copyAgent'
	useJUnitPlatform()

	environment("GOOGLE_CLOUD_QUOTA_PROJECT", "test-project-id")
	jvmArgs = [
		"-javaagent:${javaAgentJarPath}",
		"-Dotel.javaagent.extensions=${authExtensionJarPath}",
		"-Dgoogle.cloud.project=my-gcp-project",
		"-Dotel.java.global-autoconfigure.enabled=true",
		"-Dotel.exporter.otlp.endpoint=http://localhost:4318",
		"-Dotel.resource.providers.gcp.enabled=true",
		"-Dotel.traces.exporter=otlp",
		"-Dotel.bsp.schedule.delay=2000",
		"-Dotel.metrics.exporter=none",
		"-Dotel.logs.exporter=none",
		"-Dotel.exporter.otlp.protocol=http/protobuf",
		"-Dmockserver.logLevel=off"
	]
}
